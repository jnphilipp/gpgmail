#!/usr/bin/env bash
# vim: ft=sh fileencoding=utf-8 sts=4 sw=4 et:
# Copyright (C) 2019-2022 J. Nathanael Philipp (jnphilipp) <nathanael@philipp.land>
# postfix filter script for gpgmail
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

usage() {
    cat << EOF
usage: gpgmail-postfix (-d|-e|-s|-E) [-H|-S] [-g PATH] [-k KEYID] [-p PASSPHRASE] [--sendmailpath SENDMAIL_PATH] -r RECIPIENT [SENDMAIL_ARGS]

OPTIONS:
    -d / --decrypt                  Decrypt E-mail
    -e / --encrypt                  Encrypt E-mail
    -s / --sign                     Sign E-mail
    -E / --sign-encrypt             Sign and encrypt E-mail

    -H / --encrypt-headers          Encrypt headers
    -S / --encrypt-subject          Encrypt subject

    -g / --gnupghome PATH           Path to gnupg home
    -k / --key KEYID                PGP-key to use
    -p / --passphrase PASSPHRASE    Passphrase for PGP-key
    -r / --recipient RECIPIENT      E-mail recipient
    
    --sendmailpath SENDMAIL_PATH    Path to sendmail or other mail sending utility

    SENDMAIL_ARGS                   Arguments passed to sendmail

    -h / --help                     Shows this help message
    -v / --version                  Show prgram version number
EOF
    exit 0
}

version() {
    cat << EOF
gpgmail-postfix v0.6.2

Report bugs to https://github.com/jnphilipp/gpgmail/issues.

Written by J. Nathanael Philipp <nathanael@philipp.land>
EOF
    exit 0
}

SENDMAIL=/usr/sbin/sendmail
GPGMAIL=/usr/bin/gpgmail

GPGMAIL_command=
GPGMAIL_gnupghome=
GPGMAIL_key=
GPGMAIL_passphrase=
GPGMAIL_encrypt_headers=

RECIPIENT=

SENDMAIL_ARGS=

while true ; do
    case "$1" in
        -d|--decrypt) [ -n "$GPGMAIL_command" ] && usage || GPGMAIL_command="--decrypt" ; shift ;;
        -e|--encrypt) [ -n "$GPGMAIL_command" ] && usage || GPGMAIL_command="--encrypt" ; shift ;;
        -s|--sign) [ -n "$GPGMAIL_command" ] && usage || GPGMAIL_command="--sign"; shift ;;
        -E|--sign-encrypt) [ -n "$GPGMAIL_command" ] && usage || GPGMAIL_command="--sign-encrypt" ; shift ;;

        -H|--encrypt-headers) [ -n "$GPGMAIL_encrypt_headers" ] && usage || GPGMAIL_encrypt_headers="--encrypt-headers" ; shift ;;
        -S|--encrypt-subject) [ -n "$GPGMAIL_encrypt_headers" ] && usage || GPGMAIL_encrypt_headers="--encrypt-subject" ; shift ;;

        -g|--gnupghome) GPGMAIL_gnupghome="--gnupghome=${2}" ; shift 2 ;;
        -k|--key) GPGMAIL_key="--key=${2}" ; shift 2 ;;
        -p|--passphrase) GPGMAIL_passphrase="--passphrase=${2}"; shift 2 ;;
        -r|--recipient) RECIPIENT=$2; shift 2 ;;

        --sendmailpath) SENDMAIL="${2}" ; shift 2 ;;

        -h|--help) usage ;;
        -v|--version) version ;;
        "") break ;;
        *) [ -n "$SENDMAIL_ARGS" ] && SENDMAIL_ARGS="${SENDMAIL_ARGS} ${1}" || SENDMAIL_ARGS=$1; shift ;;
    esac
done

([ -z "$GPGMAIL_command" ] || [ -z "$RECIPIENT" ]) && usage

set -o pipefail

#encrypt and resend directly from stdin
eval ${GPGMAIL} "${GPGMAIL_command}" "${GPGMAIL_encrypt_headers}" "${GPGMAIL_gnupghome}" "${GPGMAIL_key}" "${GPGMAIL_passphrase}" "${RECIPIENT}" | ${SENDMAIL} "${SENDMAIL_ARGS}" "${RECIPIENT}"
exit $?
