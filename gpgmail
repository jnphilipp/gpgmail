#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# vim: ft=python fileencoding=utf-8 sts=4 sw=4 et:
# Copyright (C) 2019-2022 J. Nathanael Philipp (jnphilipp) <nathanael@philipp.land>
#
# Encrypt/Decrypt GPG/MIME emails.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
"""This tool can encrypt and decrypt emails using PGP/MIME.

Emails inputed from stdin and outputed to stdout. When encrypting, the tool preserves
all headers in the original email in the encrypted part, and copies relevant headers
to the output. When decrypting, any headers are ignored, and only the encrypted
headers are restored.

Encrypted email are not reencrypted. This is check based on the content type.
"""


import re
import traceback
import sys

from argparse import ArgumentParser, FileType, RawTextHelpFormatter
from email import message_from_bytes
from email.message import Message
from email.mime.base import MIMEBase
from gnupg import GPG
from typing import List


__author__ = "J. Nathanael Philipp"
__email__ = "nathanael@philipp.land"
__license__ = "GPLv3"
__version__ = "0.7.1"
__github__ = "https://github.com/jnphilipp/gpgmail"
VERSION = (
    f"%(prog)s v{__version__}\n\nReport bugs to {__github__}/issues."
    + f"\n\nWritten by {__author__} <{__email__}>"
)
PROTECTED_HEADERS = {
    "CC",
    "Date",
    "Followup-To",
    "From",
    "Message-ID",
    "Newsgroups",
    "References",
    "Reply-To",
    "Subject",
    "To",
}


def copy_headers(source: Message, target: Message) -> Message:
    """Copy all headers from source message to target message.

    Args:
     * source: source message
     * target: target message

    Return:
     * target message with headers from source message, not overriding existing.
    """
    headers_not_to_override = {key.lower() for key in target.keys()}
    for key, value in source.items():
        if key.lower() not in headers_not_to_override:
            target[key] = value
    return target


def as_bytes(mail: Message) -> bytes:
    """Convert a message to bytes.

    Args:
     * mail: message to convert

    Return:
     * Message as bytes.
    """
    try:
        return mail.as_bytes()
    except UnicodeEncodeError:
        return mail.as_string(maxheaderlen=60).encode("utf8")


def decrypt(mail: Message, gnupghome: str = None, **kwargs) -> bytes:
    """Decrypt mail.

    Args:
     * mail: mail to decrypt
     * gnupghome: optional GnuPGP home folder
     * **kwargs: additional arguments for decryption

    Returns:
     * Decrypted mail as bytes.
    """
    gpg = GPG(gnupghome=gnupghome)
    decrypted = gpg.decrypt(as_bytes(mail), **kwargs)
    if not decrypted.ok:
        raise RuntimeError(f"Could not decrypt message: {decrypted.status}")
    return decrypted.data


def encrypt(
    mail: Message,
    recipients: List[str],
    sign_mail: bool = True,
    key: str = None,
    passphrase: str = None,
    encrypt_headers: bool = False,
    encrypt_subject: bool = False,
    gnupghome: str = None,
) -> bytes:
    """Encrypt mail.

    Args:
     * mail: mail to encrypt
     * recipients: list of mail recipients
     * sign_mail: sign mail, default true
     * key: GnuPGP key ID
     * passphrase: GnuPGP key passphrase
     * encrypt_headers: encrypt mail headers, default false
     * encrypt_subject: encrypt mail subject, default false
     * gnupghome: optional GnuPGP home folder

    Returns:
     * Encrypted mail as bytes.
    """
    if sign_mail and key:
        pmail = message_from_bytes(sign(mail, key, passphrase, gnupghome))
    else:
        pmail = protected_headers_mail(mail)
    gpg = GPG(gnupghome=gnupghome)
    encrypted = gpg.encrypt(as_bytes(pmail), recipients)
    if not encrypted.ok:
        raise RuntimeError(f"Could not encrypt message: {encrypted.status}")

    pgp_msg = MIMEBase(
        _maintype="multipart",
        _subtype="encrypted",
        protocol="application/pgp-encrypted",
    )
    if encrypt_headers:
        keys = {k.lower() for k in mail.keys()}
        for k in PROTECTED_HEADERS:
            if k.lower() in keys:
                pgp_msg.add_header(_name=k, _value="...")
    elif encrypt_subject:
        pgp_msg.add_header(_name="Subject", _value="...")

    pgp_msg_part1 = Message()
    pgp_msg_part1.add_header(_name="Content-Type", _value="application/pgp-encrypted")
    pgp_msg_part1.add_header(
        _name="Content-Description", _value="PGP/MIME version identification"
    )
    pgp_msg_part1.set_payload("Version: 1\n")

    pgp_msg_part2 = Message()
    pgp_msg_part2.add_header(
        _name="Content-Type", _value="application/octet-stream", name="encrypted.asc"
    )
    pgp_msg_part2.add_header(
        _name="Content-Description", _value="OpenPGP encrypted message"
    )
    pgp_msg_part2.add_header(
        _name="Content-Disposition", _value="inline", filename="encrypted.asc"
    )
    pgp_msg_part2.set_payload(str(encrypted))

    pgp_msg.attach(pgp_msg_part1)
    pgp_msg.attach(pgp_msg_part2)
    return as_bytes(copy_headers(pmail, pgp_msg))


def protected_headers_mail(mail: Message) -> Message:
    """Convert mail into a mail with protected headers (RFC 822).

    Args:
     * mail: mail to convert headers

    Returns:
     * conveerted mail
    """
    if "Content-Type" not in mail or (
        "Content-Type" in mail and 'protected-headers="v1"' not in mail["Content-Type"]
    ):
        base_msg = MIMEBase(
            _maintype="multipart", _subtype="mixed", protected_headers="v1"
        )

        pheaders_msg = Message()
        pheaders_msg.add_header(
            _name="Content-Type", _value="text/rfc822-headers", protected_headers="v1"
        )
        pheaders_msg.add_header(_name="Content-Disposition", _value="inline")

        keys = {k.lower() for k in mail.keys()}
        for k in PROTECTED_HEADERS:
            if k.lower() in keys:
                pheaders_msg.add_header(_name=k, _value=mail[k])

        orig_msg = Message()
        if "Content-Type" in mail:
            orig_msg["Content-Type"] = mail["Content-Type"]
        if mail.get_charset():
            orig_msg.set_charset(mail.get_charset())

        if mail.is_multipart():
            for payload in mail.get_payload():
                orig_msg.attach(payload)
            if "Content-Transfer-Encoding" in mail and mail[
                "Content-Transfer-Encoding"
            ] in ["quoted-printable", "base64"]:
                del mail["Content-Transfer-Encoding"]
        else:
            orig_msg.set_payload(mail.get_payload(decode=True))
            if "Content-Transfer-Encoding" in mail and mail[
                "Content-Transfer-Encoding"
            ] not in ["quoted-printable", "base64"]:
                orig_msg["Content-Transfer-Encoding"] = mail[
                    "Content-Transfer-Encoding"
                ]
            del mail["Content-Transfer-Encoding"]

        base_msg.attach(pheaders_msg)
        base_msg.attach(orig_msg)
        return copy_headers(mail, base_msg)
    return mail


def sign(
    mail: Message, key: str, passphrase: str = None, gnupghome: str = None
) -> bytes:
    """Sign mail.

    Args:
     * mail: mail to encrypt
     * key: GnuPGP key ID
     * passphrase: GnuPGP key passphrase
     * gnupghome: optional GnuPGP home folder

    Returns:
     * Signed mail as bytes.
    """
    pmail = protected_headers_mail(mail)
    gpg = GPG(gnupghome=gnupghome)
    signature = gpg.sign(
        re.sub(rb"\r?\n", b"\r\n", as_bytes(pmail)),
        keyid=key,
        passphrase=passphrase,
        detach=True,
    )
    if signature.status != "signature created":
        raise RuntimeError(f"Could not sign message: {signature.status}")

    pgp_msg = MIMEBase(
        _maintype="multipart",
        _subtype="signed",
        micalg="pgp-sha512",
        protocol="application/pgp-signature",
    )

    pgp_msg_signature = Message()
    pgp_msg_signature.add_header(
        _name="Content-Type", _value="application/pgp-signature", name="signature.asc"
    )
    pgp_msg_signature.add_header(
        _name="Content-Description", _value="OpenPGP digital signature"
    )
    pgp_msg_signature.add_header(
        _name="Content-Disposition", _value="attachment", filename="signature.asc"
    )
    pgp_msg_signature.set_payload(str(signature))

    pgp_msg.attach(pmail)
    pgp_msg.attach(pgp_msg_signature)
    return as_bytes(copy_headers(pmail, pgp_msg))


if __name__ == "__main__":
    parser = ArgumentParser(prog="gpgmail", formatter_class=RawTextHelpFormatter)
    parser.add_argument("-v", "--version", action="version", version=VERSION)
    parser.add_argument(
        "-g", "--gnupghome", default=None, help="Path to GnuPG home dir."
    )
    parser.add_argument("-k", "--key", help="GnuPG key")
    parser.add_argument(
        "-p", "--passphrase", default=None, help="Passphrase for given GnuPG key."
    )
    parser.add_argument(
        "RECIPIENTS", nargs="*", help="Key id or email of keys to encrypt for."
    )
    parser.add_argument(
        "MAIL",
        type=FileType("rb"),
        nargs="?",
        default=sys.stdin.buffer,
        help="E-mail, default from stdin.",
    )

    group = parser.add_mutually_exclusive_group(required=False)
    group.add_argument(
        "-H",
        "--encrypt-headers",
        action="store_true",
        help="Encrypt some headers when encrypting a email "
        + "(https://github.com/autocrypt/memoryhole).",
    )
    group.add_argument(
        "-S",
        "--encrypt-subject",
        action="store_true",
        help="Encrypt the subject when encrypting a email, " + "see --encrypt-headers.",
    )

    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument("-d", "--decrypt", action="store_true", help="Decrypt E-mail.")
    group.add_argument("-e", "--encrypt", action="store_true", help="Encrypt E-mail.")
    group.add_argument("-s", "--sign", action="store_true", help="Sign E-mail.")
    group.add_argument(
        "-E", "--sign-encrypt", action="store_true", help="Sign and encrypt E-mail."
    )
    args = parser.parse_args()

    orig_mail = args.MAIL.read()
    try:
        mail = message_from_bytes(orig_mail)
        if args.decrypt:
            sys.stdout.buffer.write(
                decrypt(mail, args.gnupghome, passphrase=args.passphrase)
            )
        elif args.encrypt or args.sign_encrypt:
            if mail.get_content_type() == "multipart/encrypted":
                sys.stdout.buffer.write(as_bytes(mail))
            else:
                sys.stdout.buffer.write(
                    encrypt(
                        mail,
                        args.RECIPIENTS,
                        args.sign_encrypt,
                        args.key,
                        args.passphrase,
                        args.encrypt_headers,
                        args.encrypt_subject,
                        args.gnupghome,
                    )
                )
        elif args.sign:
            sys.stdout.buffer.write(
                sign(mail, args.key, args.passphrase, args.gnupghome)
            )
    except Exception:
        traceback.print_exc(file=sys.stderr)
        sys.stdout.buffer.write(orig_mail)
